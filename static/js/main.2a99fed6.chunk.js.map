{"version":3,"sources":["components/Sidebar.js","containers/Sidebar.js","components/CommandMessage.js","components/Message.js","components/MessagesList.js","containers/MessagesList.js","components/AddMessage.js","redux/actions/index.js","containers/AddMessage.js","redux/actions/ActionTypes.js","App.js","sockets/index.js","redux/reducers/Messages.js","redux/reducers/Users.js","redux/reducers/index.js","sagas/index.js","index.js"],"names":["Sidebar","users","id","map","user","class","key","name","connect","state","SidebarComponent","CommandMessage","message","author","time","useState","videoId","setVideoId","query","split","slice","join","useEffect","fetch","then","res","json","result","items","catch","err","console","log","title","width","height","src","frameBorder","allowFullScreen","Message","props","MessagesList","messages","MessagesListComponent","AddMessage","input","size","onKeyPress","event","dispatch","value","type","ref","node","nextMessageId","nextUserId","date","Date","toLocaleTimeString","addMessage","AddMessageComponent","App","Component","setupSocket","username","socket","undefined","process","PORT","WebSocket","toString","onopen","send","JSON","stringify","onmessage","data","parse","action","chat","combineReducers","handleNewMessage","params","takeEvery","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","applyMiddleware","root","document","getElementById","modalRoot","Modal","open","handleChange","setState","target","handleSubmit","preventDefault","Math","floor","random","run","this","ReactDOM","createPortal","noValidate","onSubmit","placeholder","onChange","onClick","handleOpen","React","render"],"mappings":"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","file":"static/js/main.2a99fed6.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/*\nComponent that dispalys the list of the connected users\n@users: List with users\n*/\nconst Sidebar = ({ users }) => (\n  <aside id=\"sidebar\">\n    <h2>Online Users</h2>\n    <ul>\n      {users.map((user) => (\n        <li class=\"sidebar-user\" key={user.id}>\n          {user.name}\n        </li>\n      ))}\n    </ul>\n  </aside>\n);\n\n// Avoid linting erros\nSidebar.propTypes = {\n  users: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default Sidebar;\n","import { connect } from \"react-redux\";\nimport SidebarComponent from \"../components/Sidebar\";\n\n// This connect(mapStateToProps, mapDispatchToProps)\n/*\n@mapStateToProps: What state is passed via props\n@mapDispatchToProps: Which actions are dispatched via props\n\nConnect returns a function. that function then calls our component\nconnect binds up the \"behavior\" and the \"look\"\n\nIn this case:\nmapStateToProps - List of all users\nmapDispatchToProps - No actions dispatched\n*/\nexport const Sidebar = connect(\n  (state) => ({\n    users: state.users,\n  }),\n  {}\n)(SidebarComponent);\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../styles/message.css\";\n\n/*\nComponent that defines the look of the messages\n@message: Message to be written\n@author: Author of the message\n*/\nconst CommandMessage = ({ message, author, time }) => {\n  const [videoId, setVideoId] = useState([]);\n  const command = message.split(\" \");\n  const query = command.slice(1).join(\"+\");\n\n  useEffect(() => {\n    fetch(\n      \"https://www.googleapis.com/youtube/v3/search?key=AIzaSyAXv4dRTaYoq8afDX3rnrgkUiisFPSje9o&type=video&part=snippet&maxResults=1&q=\" +\n        query\n    )\n      .then((res) => res.json())\n      .then((result) => {\n        setVideoId(result.items[0].id.videoId);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n  return (\n    <p class=\"message\">\n      <strong class=\"message-author\">{author}</strong>: {message}\n      <p class=\"message-time\">{time}</p>\n      <br />\n      <iframe\n        title=\"video\"\n        width=\"420\"\n        height=\"315\"\n        src={`http://www.youtube.com/embed/${videoId}`}\n        frameBorder=\"10\"\n        allowFullScreen\n      ></iframe>\n    </p>\n  );\n};\n\n// void Linting errors\nCommandMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n  author: PropTypes.string.isRequired,\n};\n\nexport default CommandMessage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CommandMessage from \"./CommandMessage\";\nimport \"../styles/message.css\";\n\n/*\nComponent that defines the look of the messages\n@message: Message to be written\n@author: Author of the message\n*/\nconst Message = (props) => {\n  const command = props.message.split(\" \");\n\n  switch (command[0]) {\n    case \"/youtube\":\n      return <CommandMessage key={props.id} {...props} />;\n    default:\n      return (\n        <p class=\"message\">\n          <strong class=\"message-author\">{props.author}</strong>:{\" \"}\n          {props.message}\n          <p class=\"message-time\">{props.time}</p>\n        </p>\n      );\n  }\n};\n\n// void Linting errors\nMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n  author: PropTypes.string.isRequired,\n};\n\nexport default Message;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Message from \"./Message\";\n\n/*\nComponent that displays every single message written atm\n@messages: List with all messages\n\nmessages is passed by the container in the connect func\n*/\nconst MessagesList = ({ messages }) => (\n  <section id=\"messages-list\">\n    <ul class=\"messages-list-ul\">\n      {messages.map((message) => (\n        // Passing Message component the author and the message\n        <Message key={message.id} {...message} />\n      ))}\n    </ul>\n  </section>\n);\n\n// Avoid Linting errors\nMessagesList.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      message: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default MessagesList;\n","import { connect } from \"react-redux\";\nimport MessagesListComponent from \"../components/MessagesList\";\n\n// This connect(mapStateToProps, mapDispatchToProps)\n/*\n@mapStateToProps: What state is passed via props\n@mapDispatchToProps: Which actions are dispatched via props\n\nConnect returns a function. that function then calls our component\nconnect binds up the \"behavior\" and the \"look\"\n\nIn this case:\nmapStateToProps - List of all messages\nmapDispatchToProps - No actions dispatched\n*/\nexport const MessagesList = connect(\n  (state) => ({\n    messages: state.messages,\n  }),\n  {}\n)(MessagesListComponent);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/*\nInput component at the bottom of the chat App\nWhen Enter is pressed, tha value of the input is dispatched\n\nprops dispatch the value of the input and \"Me\" to the AddMessage container\n\n*/\nconst AddMessage = (props) => {\n  let input;\n\n  return (\n    <section id=\"new-message\">\n      <p>\n        <small>New message:</small>\n      </p>\n      <input\n        class=\"new-message-input\"\n        size=\"100\"\n        onKeyPress={(event) => {\n          if (event.key === \"Enter\") {\n            // Dispatching value of the input and string \"Me\" (Name of the current user)\n            props.dispatch(input.value, \"Me\");\n            // Resets input value\n            input.value = \"\";\n          }\n        }}\n        type=\"text\"\n        // React way to get the value from an input\n        /*\n        When the component renders the first time, you want to bind the DOM node to the this object of the component.\n        Then you have access to the DOM node. In the code snippet above it is used to get the input value of the input element when you submit the form.\n        */\n        ref={(node) => {\n          input = node;\n        }}\n      />\n    </section>\n  );\n};\n\n// Avoiding Linting errors\nAddMessage.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default AddMessage;\n","import * as types from \"./ActionTypes\";\n\nlet nextMessageId = 0;\nlet nextUserId = 0;\nlet date = new Date();\n\n/* Action - When a new message is sent\n@message: The message\n@author: Who the message is from\nIn state\n@type: Name of the action\n@id: Amount of messages\n*/\nexport const addMessage = (message, author) => (\n  (date = new Date()),\n  {\n    type: types.ADD_MESSAGE,\n    id: nextMessageId++,\n    time: date.toLocaleTimeString(),\n    message,\n    author,\n  }\n);\n\n/* Action - When a new user enters the chat\n@name: name of the user\nIn state\n@type: Name of the action\n@id: Amount of users\n*/\nexport const addUser = (name) => ({\n  type: types.ADD_USER,\n  id: nextUserId++,\n  name,\n});\n\n/* Action - When the OTHER USERS receive a message\n@message: The message\n@author: Who the message is from\nIn state\n@type: Name of the action\n@id: Amount of messages\n*/\nexport const messageReceived = (message, author) => (\n  (date = new Date()),\n  {\n    type: types.MESSAGE_RECEIVED,\n    id: nextMessageId++,\n    time: date.toLocaleTimeString(),\n    message,\n    author,\n  }\n);\n\n/* Action - Updates user list when a user enters the chat\n@users: List of user names\nIn state\n@type: Name of the action\n*/\nexport const populateUsersList = (users) => ({\n  type: types.USERS_LIST,\n  users,\n});\n","import { connect } from \"react-redux\";\nimport AddMessageComponent from \"../components/AddMessage\";\nimport { addMessage } from \"../redux/actions\";\n\n// This is the smart vs dumb connection\n/*\nsmart - Container knowing actions should be dispatched\ndumb - Component knowing how the new state,\ncreated by a dispatched action should behave\n\n@dispatch: Action that must be dispatched\nfrom AddMessageComponent we receive input.value and \"Me\"\nfor \"message\" and \"author\" respectively\n*/\nconst mapDispatchToProps = (dispatch) => ({\n  dispatch: (message, author) => {\n    dispatch(addMessage(message, author));\n  },\n});\n\n// This connect(mapStateToProps, mapDispatchToProps)\n/*\n@mapStateToProps: What state is passed via props\n@mapDispatchToProps: Which actions are dispatched via props\n\nConnect returns a function. that function then calls our component\nconnect binds up the \"behavior\" and the \"look\"\n\nIn this case\nmapStateToProps - New empty state\nmapDispatchToProps - addMessage action with message and author passed to props\n*/\nexport const AddMessage = connect(\n  () => ({}),\n  mapDispatchToProps\n)(AddMessageComponent);\n","// Actions saved into constants to avoid typos\nexport const ADD_MESSAGE = \"ADD_MESSAGE\";\nexport const MESSAGE_RECEIVED = \"MESSAGE_RECEIVED\";\nexport const ADD_USER = \"ADD_USER\";\nexport const USERS_LIST = \"USERS_LIST\";\n","import React, { Component } from \"react\";\nimport \"./styles/App.css\";\nimport { Sidebar } from \"./containers/Sidebar\";\nimport { MessagesList } from \"./containers/MessagesList\";\nimport { AddMessage } from \"./containers/AddMessage\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <h1 id=\"title\">Y.A.C</h1>\n        <div id=\"container\">\n          <Sidebar />\n          <section id=\"main\">\n            <MessagesList />\n            <AddMessage />\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import * as types from \"../redux/actions/ActionTypes\";\nimport { addUser, messageReceived, populateUsersList } from \"../redux/actions\";\n\n//let userList = [];\n\nconst setupSocket = (dispatch, username) => {\n  let socket\n\n  if(process.env.PORT === undefined) {\n    socket = new WebSocket(\"ws://localhost:1488\");\n  } else {socket = new WebSocket(\"ws://localhost:\" + process.env.PORT.toString());}\n\n  /*\n  if (userList.includes(username)) {\n    alert(username + \" Has already been taken, please select another.\");\n    window.location.reload();\n  } else userList.push(username);\n\n  console.log(userList);\n*/\n  // When we receive a new user from the server\n  socket.onopen = () => {\n    socket.send(\n      JSON.stringify({\n        type: types.ADD_USER,\n        name: username,\n      })\n    );\n  };\n\n  // When we receive a message from the server\n  socket.onmessage = (event) => {\n    const data = JSON.parse(event.data);\n    switch (data.type) {\n      case types.ADD_MESSAGE:\n        dispatch(messageReceived(data.message, data.author));\n        break;\n      case types.ADD_USER:\n        dispatch(addUser(data.name));\n        break;\n      case types.USERS_LIST:\n        dispatch(populateUsersList(data.users));\n        break;\n      default:\n        break;\n    }\n  };\n  return socket;\n};\n\nexport default setupSocket;\n","import * as types from \"../actions/ActionTypes\";\n\n/*\nThis state handles all the Message related actions for state changes\n@state[]: Original state\n@action: Action to be executed on a state copy\n*/\nconst messages = (state = [], action) => {\n  switch (action.type) {\n    case types.ADD_MESSAGE:\n    case types.MESSAGE_RECEIVED:\n      // Creates a new state with values from the action\n      return [\n        ...state,\n        {\n          message: action.message,\n          author: action.author,\n          id: action.id,\n          time: action.time,\n        },\n      ];\n    // If the reducer receives an action that it doesn't care about, it should return the unchanged state\n    default:\n      return state;\n  }\n};\n\nexport default messages;\n","import * as types from \"../actions/ActionTypes\";\n\n/*\nThis state handles all the Users related actions for state changes\n@state[]: Original state\n@action: Action to be executed on a state copy\n*/\nconst users = (state = [], action) => {\n  switch (action.type) {\n    case types.ADD_USER:\n      return [...state, { name: action.name, id: action.id }];\n    case types.USERS_LIST:\n      return action.users;\n    // If the reducer receives an action that it doesn't care about, it should return the unchanged state\n    default:\n      return state;\n  }\n};\n\nexport default users;\n","import { combineReducers } from \"redux\";\nimport messages from \"./Messages\";\nimport users from \"./Users\";\n\n/*\ncombineReducers is a big blender of 2 or more reducers (messages, users)\nIt converts N reducers into one\n*/\nconst chat = combineReducers({\n  messages,\n  users,\n});\n\nexport default chat;\n","import { takeEvery } from \"redux-saga/effects\";\nimport * as types from \"../redux/actions/ActionTypes\";\n\n// A generator function, so everytime it runs, it can return a different value\nconst handleNewMessage = function* handleNewMessage(params) {\n  yield takeEvery(types.ADD_MESSAGE, (action) => {\n    action.author = params.username;\n    params.socket.send(JSON.stringify(action));\n  });\n};\n\nexport default handleNewMessage;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport setupSocket from \"./sockets/index\";\nimport reducers from \"./redux/reducers\";\nimport handleNewMessage from \"./sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(reducers, applyMiddleware(sagaMiddleware));\n\nconst root = document.getElementById(\"root\");\nconst modalRoot = document.getElementById(\"modal\");\n\nclass Modal extends React.Component {\n  state = {\n    username: \"\",\n    open: true,\n  };\n\n  handleChange = (event) => {\n    this.setState({ username: event.target.value });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    // Prevent empty users\n    if (this.state.username === \"\") {\n      this.state.username = \"User\" + Math.floor(Math.random() * 100);\n    }\n\n    // Prevent same usernames\n    /*\n    if (this.state.usernameList.includes(this.state.username)) {\n      console.log(\"Iguales\");\n      alert(\n        this.state.username + \" has already been taken, select another one.\"\n      );\n    } else {\n      this.state.usernameList.push(this.state.username);\n    }*/\n\n    const socket = setupSocket(store.dispatch, this.state.username);\n    sagaMiddleware.run(handleNewMessage, {\n      socket,\n      username: this.state.username,\n    });\n    this.setState({ open: false });\n  };\n\n  render() {\n    if (this.state.open) {\n      return ReactDOM.createPortal(\n        <div id=\"modal\">\n          <div class=\"modal-outside\">\n            <div class=\"modal-inside\">\n              <h1 class=\"modal-title\">\n                <strong>Y.A.C</strong>\n              </h1>\n              <hr />\n              <p class=\"modal-subtitle\">\n                <i>Please, enter your username</i>\n              </p>\n              <form noValidate onSubmit={this.handleSubmit}>\n                <div>\n                  <input\n                    class=\"modal-input\"\n                    size=\"50\"\n                    type=\"text\"\n                    name=\"username\"\n                    placeholder=\"User1\"\n                    onChange={this.handleChange}\n                  />\n                </div>\n                <div class=\"modal-button-holder\">\n                  <button\n                    class=\"modal-button\"\n                    onClick={this.handleOpen}\n                    type=\"submit\"\n                  >\n                    Login\n                  </button>\n                </div>\n                <br />\n              </form>\n            </div>\n          </div>\n        </div>,\n        modalRoot\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nReactDOM.render(\n  // Overall store is Read-Only. Only \"changed\" by actions\n  <Provider store={store}>\n    <Modal />\n    <App />\n  </Provider>,\n  root\n);\n"],"sourceRoot":""}